What did you do today? Please indicate your work in this log.

2020/11/19
    create:
        route.dat airport.dat
        edge.cpp edge.h
        vertex.cpp vertex.h
        get_data.hpp get_data.h
        main.cpp
        Makefile
    TODO: 
        add new file: route.dat


2020/11/20
    Apply the given template
    Able to print out the airport_sample
    create:
        folder: catch tests
        airport_sample.dat
        readFromFile.cpp readFromFile.hpp
    TODO:
        add new file: route.dat
        get_data.cpp


2020/11/21
    readFromFile can read airport and route
    Able to print the sample data in main function with split
    add documentations for functions
    create:
        route.dat route_sample.dat
    TODO:
        discuss how to implement with adjacent list
        

2020/11/23
    Able to find the matched airport on the world map
    implement a Hashtable
    create:
        graph.cpp graph.hpp
    TODO: 
        implement the graph using desired algorithm
        draw the airline on the map using HSLA

2020/11/24
    PROBLEMs:
        The edge class seems not working. How to draw the airline?
        How to adjust changes in Makefile? For example, which class need to create an object file
        Confuse about the arguments in drawAirline. 
        
        How to implement shortest path?
        or change shortest path to spanning tree.
        how to deal with route.dat

        we have "unknown type name" error

2020/11/26
    We solve the unknown typename problem due to crossing-reference
    We implement the graph using the Adjlist and BFS. 
    We deleted a unsued class: listnode

2020/11/27

    !!!after "make finalproj" and "./fianlproj" we met a "free() invalid pointer" error and then core dumped
    I suspect it is a memory leak problem because we have not written any destructor yet.
    In our main function, I try to draw a diagnoal white line. 
    Once it is solved, we can keep on doing shortest path.
    But how to implement shortest path?

    leak?
    imporve drawAirline algorithm
    https://en.wikipedia.org/wiki/Line_drawing_algorithm

2020/11/29
    Able to draw an airline on the map (world_map.png) given a source airport and destination airport. 
    Remaining problem: we cannot draw a opened line through the Paciffic Ocean. 


2020/11/30
    Write a function to color the airport but not tested yet
    We can find the number of incid_edges of the vertex which has the maximum incid_edges.
    This is used to change the HSLAPixel of the vertex color gradiently by the weight of the incident edges.
    Debugged the build_hash() and build().
    It turns out that our edge class has changed 
    but our algorithm has not adapt the changes, which lead to a segfault.
    Debugging the BFS() and BFS(Vertex).

    TODO: 
        Finsh debugging the BFS and we should output something.
        Test the drawAirport.
        

2020/12/1
    Wrote a function to pick the luminance for the airport points.
    Read the data file in to our data structure and tested
    Test BFS

    TODO:
        Further debugging the data sturcture
        Prepare for the mid-project checking

2020/12/3
    Debugged BFS. There is one line of route.dat:
    -------------------------------------------
        IL,10121,PKN,3910,PKN,3910,,0,AT7
    -------------------------------------------
    which source and dest are the same which casue a segfault
    So we delete this line and BFS passed.

    Changed our project goals
    Some algorithms are misunderstood. 
    

    TODO:
        Shortest Path Algorithm

2020/12/5
    Rename the graph_coloring to graphDrawing to avoid ambiguity.
    Try to draw the airline that cross the Paciffic Ocean, not done yet.
    Start to implement the Dijkstra's algorithm SSSP.
    Create a new class: priorityQueue.
    
    TODO:
        implement Dijkstra's algorithm
        debug the cross border airline drawing

2020/12/6
    We are able to draw the airline that cross the Paciffic Ocean
    Then we draw the picture using database route.dat
    The running time is relatively fast so we assume that our data sturcture perform well

    TODO:
        finish the priorityQueue
        implement Dijkstra's algorithm
        write testcases for the existed functions

2020/12/7
    update readme.md.
    implement the shortest path and priorityQueue but not tested yet
    wirte some simple testcases(some might not works)
    change the Testcases part in GOALS.

    TODO:
        debug priorityQueue and ShortestPath

2020/12/8
    update GOALS and readme.md
    improve the drawAirline, now we can draw a solid line
    the shortest path algorithm is now working
    We handle the case that the target or the source is in a miniorty group.

    TODO:
        prepared for the video recording
        generate a RESULT document

2020/12/10
	Finished recording our presentation
	Good job everyone!
    
